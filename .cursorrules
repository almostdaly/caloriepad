# CaloriePad Project Rules

## Framework and Platform

- This is an Expo React Native project
- Use React Native components and styling (NOT web components or CSS frameworks)
- Import from 'react-native' package for core components
- Use `@/components/Themed` for ThemedText and ThemedView primitives, not react native built ins.
- We use EAS to build development versions
- Use expo modules where appropriate

## Component Architecture (CRITICAL)

- **Single Responsibility Principle**: Each component should do ONE thing well
- **Pure, Prop-Driven Components**: Components should be predictable and testable
- **Break Down Large Components**: If a component exceeds ~150 lines, split it
- **Discrete Functionality**: Create focused components (e.g., SearchInput, SuggestionsList, ControlPanel)
- **Composition Over Inheritance**: Build complex UIs by combining simple components
- **Clear Component Hierarchy**: Create logical folder structure with index exports

## CODE STRUCTURE RULES (MANDATORY)

### Single Component Per File

- **ONE component export per file** - no exceptions
- Each component gets its own file named exactly as the component
- Use default exports for main components, named exports for utilities only
- If you need multiple related components, create separate files in a folder

### Component Organization

- Group components by **screen/feature area** (e.g., `food/`, `today/`, `settings/`)
- **Common/shared components** go in `common/` folder
- **Complex components** get their own folder with:
  ```
  ComponentName/
    ├── index.ts          # Re-export
    ├── ComponentName.tsx # Main component
    └── types.ts         # Component-specific types (if needed)
  ```

### Styles and Theming

- **Styles MUST live inside the component file** - no separate .styles.ts files
- Always use the colors pattern: `const colors = Colors[colorScheme ?? 'light']`
- All nested ThemedViews must use `backgroundColor: 'transparent'`
- Use semantic color names (colors.text, colors.textSecondary) never hardcoded values

### Component Size Limits

- **Maximum 150 lines per component** - must split if exceeded
- **Maximum 5 props** - refactor to config object or split component if more needed
- **Maximum 3 useState hooks** - extract to custom hook or split component if more

### Services and Utilities

- **Break up large services** - max 200 lines per service file
- **Extract common utilities** into `utils/` folder
- **No business logic in components** - delegate to services/hooks
- **Async operations** should be in services, not components

## Component Guidelines

- Use `View` instead of `div`
- Use `Text` instead of `p`, `span`, etc.
- Use `StyleSheet.create()` for styles
- Use `Pressable` or `TouchableOpacity` for interactive elements (not `button`)
- Follow React Native's layout system (flexbox-like) with style props
- Use `@/components/themed` for ThemedText and ThemedView primitives, not react native built ins.

## File Structure & Organization

- Components in `/components` directory with logical subfolders
- Create component folders when multiple related files exist
- Use index.ts exports for clean imports
- Styles should be colocated with components
- Use .tsx extension for TypeScript React Native files
- Example structure:
  ```
  components/
    common/           # Shared across multiple screens
      Button/
      Input/
    food/            # Food-related components
      SearchInput/
      SuggestionsList/
    today/           # Today screen components
      StatCard/
      EntriesList/
  ```

## Styling Rules

- NO web-specific styling frameworks (e.g., Tailwind, CSS Modules)
- Use React Native's StyleSheet API
- Follow mobile-first design principles
- Use platform-specific components when needed (`Platform.select`)

## TypeScript

- Use TypeScript for type safety
- Define interfaces for component props
- Use React.FC type for functional components
- Always use the alias imports and not relative path (e.g. `@/components`, `@/hooks`)
- Do not use `any`

## Project Guidelines

- I want to use everything native/built in as possible
- The app should be super native feeling and pure
- It should be clean and minimal UI so don't over engineer solutions
- **Always prioritize component composition and reusability**
- **Refactor immediately when components become unwieldy**

## REFACTORING RULES (IMMEDIATE ACTION REQUIRED)

When you encounter violations:

1. **Large components (>150 lines)**: Split immediately into focused sub-components
2. **Multiple exports**: Create separate files for each component
3. **Mixed responsibilities**: Extract business logic to services/hooks
4. **Inline styles**: Move to StyleSheet.create() within the same file
5. **Common utilities**: Extract to shared utils/ folder
